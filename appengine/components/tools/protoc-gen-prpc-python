#!/usr/bin/env python
# Copyright 2017 The LUCI Authors. All rights reserved.
# Use of this source code is governed under the Apache License, Version 2.0
# that can be found in the LICENSE file.

import sys

from google.protobuf import descriptor_pb2
from google.protobuf.compiler import plugin_pb2 as plugin


HEADER_FORMAT = '''
# Generated by the pRPC protocol buffer compiler plugin.  DO NOT EDIT!
# source: %(file_name)s

from google.protobuf import descriptor_pb2

# Includes description of the %(file_name)s and all of its transitive
# dependencies. Includes source code info.
FILE_DESCRIPTOR_SET = descriptor_pb2.FileDescriptorSet()
FILE_DESCRIPTOR_SET.ParseFromString(
    %(file_set_descriptor_hex)r.
    decode('hex'))
'''


SERVICE_FORMAT = '''
%(service_name)sServiceDescription = {
  'descriptor': descriptor_pb2.ServiceDescriptorProto(),
  'package': %(package_name)r,
  'file_descriptor_set': FILE_DESCRIPTOR_SET,
}
%(service_name)sServiceDescription['descriptor'].ParseFromString(
    %(descriptor_hex)r.
    decode('hex')),
'''


def build_file_set_descriptor(root_name, files):
  added = set()
  ret = descriptor_pb2.FileDescriptorSet()

  def ensure_file(name):
    if name in added:
      return

    file = files[name]
    added.add(name)
    ret.file.add().CopyFrom(file)
    for dep in file.dependency:
      ensure_file(dep)

  ensure_file(root_name)
  return ret


def generate_code(file_descriptor, all_files):
  file_set = build_file_set_descriptor(file_descriptor.name, all_files)
  fragments = [HEADER_FORMAT % {
      'file_name': file_descriptor.name,
      'file_set_descriptor_hex': file_set.SerializeToString().encode('hex'),
  }]

  for service in file_descriptor.service:
    fragments.append(SERVICE_FORMAT % {
        'service_name': service.name,
        'package_name': str(file_descriptor.package),
        'descriptor_hex': service.SerializeToString().encode('hex'),
    })
  return ('\n'.join(fragments)).strip() + '\n'


def main():
  data = sys.stdin.read()
  req = plugin.CodeGeneratorRequest()
  req.ParseFromString(data)
  res = plugin.CodeGeneratorResponse()
  files_to_generate = set(req.file_to_generate)
  files = {f.name: f for f in req.proto_file}
  for input in req.proto_file:
    if input.name not in files_to_generate or not input.service:
      continue
    res.file.add(
        name=input.name.replace('.proto', '_prpc_pb2.py'),
        content=generate_code(input, files),
    )
  sys.stdout.write(res.SerializeToString())


if __name__ == '__main__':
   main()
