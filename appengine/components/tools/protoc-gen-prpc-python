#!/usr/bin/env python
# Copyright 2017 The LUCI Authors. All rights reserved.
# Use of this source code is governed under the Apache License, Version 2.0
# that can be found in the LICENSE file.

import sys

from google.protobuf.compiler import plugin_pb2 as plugin


HEADER_FORMAT = '''
# Generated by the pRPC protocol buffer compiler plugin.  DO NOT EDIT!
# source: %s

from google.protobuf import descriptor_pb2
'''


SERVICE_FORMAT = '''
%sServiceDescription = {
  'descriptor': descriptor_pb2.ServiceDescriptorProto(),
  'package': %r,
}
%sServiceDescription['descriptor'].ParseFromString(%r.decode(\'hex\'))
'''


def generate_code(input):
  fragments = [HEADER_FORMAT % input.name]
  for service in input.service:
    fragments.append(SERVICE_FORMAT % (
        service.name,
        str(input.package),
        service.name,
        service.SerializeToString().encode('hex'),
    ))
  return ('\n'.join(fragments)).strip() + '\n'


def main():
  data = sys.stdin.read()
  req = plugin.CodeGeneratorRequest()
  req.ParseFromString(data)
  res = plugin.CodeGeneratorResponse()
  files_to_generate = set(req.file_to_generate)
  for input in req.proto_file:
    if input.name not in files_to_generate:
      continue
    res.file.add(
        name=input.name.replace('.proto', '_prpc_pb2.py'),
        content=generate_code(input),
    )
  sys.stdout.write(res.SerializeToString())


if __name__ == '__main__':
   main()
