# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

import worker_manager_pb2 as worker__manager__pb2


class WorkerManagerStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.CreateWorker = channel.unary_unary(
        '/google.internal.devtools.workerfarm.v1test1.WorkerManager/CreateWorker',
        request_serializer=worker__manager__pb2.CreateWorkerRequest.SerializeToString,
        response_deserializer=worker__manager__pb2.Worker.FromString,
        )
    self.GetWorker = channel.unary_unary(
        '/google.internal.devtools.workerfarm.v1test1.WorkerManager/GetWorker',
        request_serializer=worker__manager__pb2.GetWorkerRequest.SerializeToString,
        response_deserializer=worker__manager__pb2.Worker.FromString,
        )
    self.ListWorkers = channel.unary_unary(
        '/google.internal.devtools.workerfarm.v1test1.WorkerManager/ListWorkers',
        request_serializer=worker__manager__pb2.ListWorkersRequest.SerializeToString,
        response_deserializer=worker__manager__pb2.ListWorkersResponse.FromString,
        )
    self.UpdateWorker = channel.unary_unary(
        '/google.internal.devtools.workerfarm.v1test1.WorkerManager/UpdateWorker',
        request_serializer=worker__manager__pb2.UpdateWorkerRequest.SerializeToString,
        response_deserializer=worker__manager__pb2.Worker.FromString,
        )


class WorkerManagerServicer(object):

  def CreateWorker(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetWorker(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListWorkers(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UpdateWorker(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_WorkerManagerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'CreateWorker': grpc.unary_unary_rpc_method_handler(
          servicer.CreateWorker,
          request_deserializer=worker__manager__pb2.CreateWorkerRequest.FromString,
          response_serializer=worker__manager__pb2.Worker.SerializeToString,
      ),
      'GetWorker': grpc.unary_unary_rpc_method_handler(
          servicer.GetWorker,
          request_deserializer=worker__manager__pb2.GetWorkerRequest.FromString,
          response_serializer=worker__manager__pb2.Worker.SerializeToString,
      ),
      'ListWorkers': grpc.unary_unary_rpc_method_handler(
          servicer.ListWorkers,
          request_deserializer=worker__manager__pb2.ListWorkersRequest.FromString,
          response_serializer=worker__manager__pb2.ListWorkersResponse.SerializeToString,
      ),
      'UpdateWorker': grpc.unary_unary_rpc_method_handler(
          servicer.UpdateWorker,
          request_deserializer=worker__manager__pb2.UpdateWorkerRequest.FromString,
          response_serializer=worker__manager__pb2.Worker.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'google.internal.devtools.workerfarm.v1test1.WorkerManager', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
