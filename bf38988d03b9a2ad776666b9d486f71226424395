{
  "comments": [
    {
      "key": {
        "uuid": "477a5a3b_8d39c7bd",
        "filename": "client/isolate_storage.py",
        "patchSetId": 5
      },
      "lineNbr": 569,
      "author": {
        "id": 1161379
      },
      "writtenOn": "2020-05-13T06:46:28Z",
      "side": 1,
      "message": "could you enable python3 test taking this path too?",
      "revId": "bf38988d03b9a2ad776666b9d486f71226424395",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d7a3b9d_89ee0d6c",
        "filename": "client/isolate_storage.py",
        "patchSetId": 5
      },
      "lineNbr": 569,
      "author": {
        "id": 1375000
      },
      "writtenOn": "2020-05-13T06:56:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "477a5a3b_8d39c7bd",
      "revId": "bf38988d03b9a2ad776666b9d486f71226424395",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "483cb460_fd4000f5",
        "filename": "client/tests/threading_utils_test.py",
        "patchSetId": 5
      },
      "lineNbr": 511,
      "author": {
        "id": 1161379
      },
      "writtenOn": "2020-05-13T06:46:28Z",
      "side": 1,
      "message": "Can we use\nhttps://docs.python.org/2.7/library/unittest.html#unittest.TestCase.assertItemsEqual\ninstead?\n`self.assertEqual(range(-31,1), results)`",
      "revId": "bf38988d03b9a2ad776666b9d486f71226424395",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04b7c144_fb84780e",
        "filename": "client/tests/threading_utils_test.py",
        "patchSetId": 5
      },
      "lineNbr": 511,
      "author": {
        "id": 1375000
      },
      "writtenOn": "2020-05-13T06:56:38Z",
      "side": 1,
      "message": "Ack, I used https://docs.python.org/2.7/library/unittest.html#unittest.TestCase.assertSequenceEqual, becuase assertItemsEqual ignores the item orders, and is renamed in Py3.",
      "parentUuid": "483cb460_fd4000f5",
      "revId": "bf38988d03b9a2ad776666b9d486f71226424395",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c39bc6a_d8aea832",
        "filename": "client/tests/threading_utils_test.py",
        "patchSetId": 5
      },
      "lineNbr": 511,
      "author": {
        "id": 1161379
      },
      "writtenOn": "2020-05-13T07:45:47Z",
      "side": 1,
      "message": "I think this test doesn\u0027t take care order actually?",
      "parentUuid": "04b7c144_fb84780e",
      "revId": "bf38988d03b9a2ad776666b9d486f71226424395",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f7ca43b_28361196",
        "filename": "client/tests/threading_utils_test.py",
        "patchSetId": 5
      },
      "lineNbr": 511,
      "author": {
        "id": 1375000
      },
      "writtenOn": "2020-05-13T07:49:13Z",
      "side": 1,
      "message": "Probably not. But again, the naming is different in py2 vs 3. So I\u0027d suggest to just use whatever is the simplest that works.",
      "parentUuid": "5c39bc6a_d8aea832",
      "revId": "bf38988d03b9a2ad776666b9d486f71226424395",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91f6c7b0_4f958f4d",
        "filename": "client/tests/threading_utils_test.py",
        "patchSetId": 5
      },
      "lineNbr": 511,
      "author": {
        "id": 1161379
      },
      "writtenOn": "2020-05-13T07:50:49Z",
      "side": 1,
      "message": "ah, then could you use\nhttps://six.readthedocs.io/#six.assertCountEqual\n?",
      "parentUuid": "1f7ca43b_28361196",
      "revId": "bf38988d03b9a2ad776666b9d486f71226424395",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}