{
  "comments": [
    {
      "key": {
        "uuid": "b1ab80ec_6edc955b",
        "filename": "client/utils/threading_utils.py",
        "patchSetId": 2
      },
      "lineNbr": 722,
      "author": {
        "id": 1003190
      },
      "writtenOn": "2018-11-27T18:26:33Z",
      "side": 1,
      "message": "Just curious, why object() instead of 1,2,3?",
      "revId": "1f178e3f80e4a69de3b32730fea41c6640ed4a88",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "151af075_5beac271",
        "filename": "client/utils/threading_utils.py",
        "patchSetId": 2
      },
      "lineNbr": 722,
      "author": {
        "id": 1000487
      },
      "writtenOn": "2018-11-27T19:41:33Z",
      "side": 1,
      "message": "Because \u00271\u0027 is not unique; so somehow 1 could be hardcoded and \u00271 is 1\u0027 be True.\n\nThat said, I learned something new: https://twitter.com/marcaruel/status/1067503404690350080",
      "parentUuid": "b1ab80ec_6edc955b",
      "revId": "1f178e3f80e4a69de3b32730fea41c6640ed4a88",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db53de3a_7e925f37",
        "filename": "client/utils/threading_utils.py",
        "patchSetId": 2
      },
      "lineNbr": 722,
      "author": {
        "id": 1003190
      },
      "writtenOn": "2018-11-27T20:21:48Z",
      "side": 1,
      "message": "Makes sense.\n\nLooks like Python doesn\u0027t handle those expressions with comparison operators quite how we expect. It somehow evaluates the expression together in some kind of chain or something, so that it can handle expressions like x \u003c y \u003c z.\n\n  \u003e\u003e\u003e 1 is 1 is 1\n  True\n  \u003e\u003e\u003e 1 is 1 is 1 is 1\n  True\n  \u003e\u003e\u003e 1 is 1 is 1 is 1 is 1\n  True\n\nThis is similar to\n\n  \u003e\u003e\u003e 1 \u003c\u003d 1 \u003c\u003d 1\n  True\n  \u003e\u003e\u003e 1 \u003d\u003d 1 \u003d\u003d 1\n  True",
      "parentUuid": "151af075_5beac271",
      "revId": "1f178e3f80e4a69de3b32730fea41c6640ed4a88",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "71d3cfc5_2a2bbc73",
        "filename": "client/utils/threading_utils.py",
        "patchSetId": 2
      },
      "lineNbr": 722,
      "author": {
        "id": 1003190
      },
      "writtenOn": "2018-11-27T20:28:02Z",
      "side": 1,
      "message": "Ah, found it:\nhttps://docs.python.org/2/reference/expressions.html#comparisons\n\n \u003e Comparisons can be chained arbitrarily, e.g., x \u003c y \u003c\u003d z is equivalent to x \u003c y and y \u003c\u003d z, except that y is evaluated only once.\n\nSo, the expression `1 is 1 is 1` is equilalent to `1 is 1 and 1 is 1`, and, `True is 1 is 1` is equivalent to `True is 1 and 1 is 1`.",
      "parentUuid": "db53de3a_7e925f37",
      "revId": "1f178e3f80e4a69de3b32730fea41c6640ed4a88",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}