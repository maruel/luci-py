{
  "comments": [
    {
      "key": {
        "uuid": "5eef693c_8419df84",
        "filename": "appengine/swarming/server/realms.py",
        "patchSetId": 11
      },
      "lineNbr": 65,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2020-05-13T00:39:32Z",
      "side": 1,
      "message": "Having two ways to report a result is not great, it will make using this function complicated. Better to either only use exceptions or only use boolean return value.",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 65,
        "endChar": 33
      },
      "revId": "9f10b259a121db2823826ba9a083574d57c6c01b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d46dafa7_242e8cb3",
        "filename": "appengine/swarming/server/realms.py",
        "patchSetId": 11
      },
      "lineNbr": 65,
      "author": {
        "id": 1366072
      },
      "writtenOn": "2020-05-13T00:54:40Z",
      "side": 1,
      "message": "Yeah, I was also wondering.\nI will always raise auth.AuthorizationError, then.\nThe functions will be called \u0027check_{realm_permission}\u0027 e.g. check_pools_create_task",
      "parentUuid": "5eef693c_8419df84",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 65,
        "endChar": 33
      },
      "revId": "9f10b259a121db2823826ba9a083574d57c6c01b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a654b1aa_77889ec2",
        "filename": "appengine/swarming/server/realms.py",
        "patchSetId": 11
      },
      "lineNbr": 65,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2020-05-13T00:59:47Z",
      "side": 1,
      "message": "SGTM, I also think returning exceptions is better in this case.",
      "parentUuid": "d46dafa7_242e8cb3",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 65,
        "endChar": 33
      },
      "revId": "9f10b259a121db2823826ba9a083574d57c6c01b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef145353_ed77847e",
        "filename": "appengine/swarming/server/realms.py",
        "patchSetId": 11
      },
      "lineNbr": 82,
      "author": {
        "id": 1161379
      },
      "writtenOn": "2020-05-13T02:45:30Z",
      "side": 1,
      "message": "move this just before L97?",
      "revId": "9f10b259a121db2823826ba9a083574d57c6c01b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13a78a6e_8ef2713b",
        "filename": "appengine/swarming/server/realms.py",
        "patchSetId": 11
      },
      "lineNbr": 100,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2020-05-13T00:39:32Z",
      "side": 1,
      "message": "This is not a fair comparison, check_schedule_request_acl does more checks that just checking the user can user the pool. A more correct approach would be to check \"swarming.pools.createTask\" result with the result of _is_allowed_to_schedule(...) from https://source.chromium.org/chromium/infra/infra/+/master:luci/appengine/swarming/server/task_scheduler.py;l\u003d1104?q\u003dcheck_schedule_request_acl\u0026ss\u003dchromium\u0026originalUrl\u003dhttps:%2F%2Fcs.chromium.org%2F.\n\nYou may need to break check_schedule_request_acl into two functions (check pool \"scheduler\" ACL and checking allowed_service_accounts ACL).",
      "range": {
        "startLine": 97,
        "startChar": 6,
        "endLine": 100,
        "endChar": 43
      },
      "revId": "9f10b259a121db2823826ba9a083574d57c6c01b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac094d73_274169f0",
        "filename": "appengine/swarming/server/realms.py",
        "patchSetId": 11
      },
      "lineNbr": 100,
      "author": {
        "id": 1366072
      },
      "writtenOn": "2020-05-13T00:54:40Z",
      "side": 1,
      "message": "I see. The original function checks two ACLs.\n\nShould I compare \n_is_allowed_to_schedule() with has_permission_dryrun(\u0027swarming.pools.createTask\u0027, ...)\nAnd\n_is_allowed_service_account() with has_permission_dryrun(\u0027swarming.tasks.runAs\u0027, ...)\n?",
      "parentUuid": "13a78a6e_8ef2713b",
      "range": {
        "startLine": 97,
        "startChar": 6,
        "endLine": 100,
        "endChar": 43
      },
      "revId": "9f10b259a121db2823826ba9a083574d57c6c01b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fefd40ee_f8cbfcd3",
        "filename": "appengine/swarming/server/realms.py",
        "patchSetId": 11
      },
      "lineNbr": 100,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2020-05-13T00:59:47Z",
      "side": 1,
      "message": "Yes.\n\nThere\u0027s also a third check (swarming.tasks.createInRealm), it has no equivalent in the current Swarming ACLs. We\u0027ll have to figure out how to \"dry run\" it too...",
      "parentUuid": "ac094d73_274169f0",
      "range": {
        "startLine": 97,
        "startChar": 6,
        "endLine": 100,
        "endChar": 43
      },
      "revId": "9f10b259a121db2823826ba9a083574d57c6c01b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}